name: RTSP AI Inference CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: rtsp-ai-inference
  REGISTRY: docker.io

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: flake8 (errors only)
        run: flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: flake8 (full, non-blocking)
        run: flake8 app.py --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: black check
        run: black --check --diff app.py

      - name: isort check
        run: isort --check-only --diff app.py

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install scanners
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Bandit
        run: bandit -r app.py -f json -o bandit-report.json || true

      - name: Safety
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch, optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # platforms: linux/amd64,linux/arm64   # uncomment if you want multi-arch test build

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Load test image
        run: docker images | grep ${{ env.IMAGE_NAME }} || true

      - name: Health-check run (device-independent)
        run: docker run --rm ${{ env.IMAGE_NAME }}:test python app.py --health-check

      - name: Simulate short run (no webcam, should not fail CI)
        run: |
          set -e
          mkdir -p test-output test-logs
          # We only verify the app starts and health-check passes; no camera on CI
          docker run --rm \
            -e OUTPUT_DIR=/app/output -e LOG_DIR=/app/logs \
            -v $PWD/test-output:/app/output \
            -v $PWD/test-logs:/app/logs \
            ${{ env.IMAGE_NAME }}:test \
            python app.py --health-check
          ls -la test-logs || true

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-test-logs
          path: |
            test-logs
            test-output

  build-and-push:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # platforms: linux/amd64,linux/arm64  # enable if you want multi-arch publish

  simulate-deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Pull latest image
        run: docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Ephemeral health-check "deployment"
        run: |
          docker run --rm \
            -e OUTPUT_DIR=/app/output -e LOG_DIR=/app/logs \
            ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest \
            python app.py --health-check

      - name: Show image details
        run: docker image inspect ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest | head -n 40
